// <auto-generated />
using System;
using AutoReferenceSystem.ApplicationServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AutoReferenceSystem.ApplicationServer.Data.PostgreSql.Migrations.AutoReferenceSystemDb
{
    [DbContext(typeof(AutoReferenceSystemContext))]
    partial class AutoReferenceSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long?>("AttachmentSizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReferensingQueryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentTypeId");

                    b.HasIndex("ReferensingQueryId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.AttachmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("AttachmentsTypes");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.Characteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacteristicTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("MeasureId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicTypeId");

                    b.HasIndex("MeasureId");

                    b.ToTable("Characteristics");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.CharacteristicsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("CharacteristicsTypes");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.ListValuesCharacteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacteristicId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicId");

                    b.ToTable("ListValuesCharacteristics");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.Measure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Measures");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ServerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.ModelCharacteristic", b =>
                {
                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.Property<int>("CharacteristicId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("ModelId", "CharacteristicId");

                    b.HasIndex("CharacteristicId");

                    b.ToTable("ModelCharacteristics");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.ReferencingQueryCharacteristic", b =>
                {
                    b.Property<int>("CharacteristicId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReferensingQueryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("CharacteristicId", "ReferensingQueryId");

                    b.HasIndex("ReferensingQueryId");

                    b.ToTable("ReferencingQueryCharacteristics");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.ReferensingQuery", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.Property<int>("QueryNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("SessionId");

                    b.ToTable("ReferencingQueries");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("AutoReferenceSystem.ApplicationServer.Domain.Entities.AttachmentType", "AttachmentType")
                        .WithMany("Attachments")
                        .HasForeignKey("AttachmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoReferenceSystem.ApplicationServer.Domain.Entities.ReferensingQuery", "ReferensingQuery")
                        .WithMany("Attachments")
                        .HasForeignKey("ReferensingQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttachmentType");

                    b.Navigation("ReferensingQuery");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.Characteristic", b =>
                {
                    b.HasOne("AutoReferenceSystem.ApplicationServer.Domain.Entities.CharacteristicsType", "CharacteristicType")
                        .WithMany("Characteristics")
                        .HasForeignKey("CharacteristicTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoReferenceSystem.ApplicationServer.Domain.Entities.Measure", "Measure")
                        .WithMany("Characteristics")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacteristicType");

                    b.Navigation("Measure");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.ListValuesCharacteristic", b =>
                {
                    b.HasOne("AutoReferenceSystem.ApplicationServer.Domain.Entities.Characteristic", "Characteristic")
                        .WithMany("ListValuesCharacteristics")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Characteristic");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.Model", b =>
                {
                    b.HasOne("AutoReferenceSystem.ApplicationServer.Domain.Entities.Server", "Server")
                        .WithMany("Models")
                        .HasForeignKey("ServerId");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.ModelCharacteristic", b =>
                {
                    b.HasOne("AutoReferenceSystem.ApplicationServer.Domain.Entities.Characteristic", "Characteristic")
                        .WithMany("ModelCharacteristics")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoReferenceSystem.ApplicationServer.Domain.Entities.Model", "Model")
                        .WithMany("ModelCharacteristics")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Characteristic");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.ReferencingQueryCharacteristic", b =>
                {
                    b.HasOne("AutoReferenceSystem.ApplicationServer.Domain.Entities.Characteristic", "Characteristic")
                        .WithMany("ReferencingQueryCharacteristics")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoReferenceSystem.ApplicationServer.Domain.Entities.ReferensingQuery", "ReferensingQuery")
                        .WithMany("ReferencingQueryCharacteristics")
                        .HasForeignKey("ReferensingQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Characteristic");

                    b.Navigation("ReferensingQuery");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.ReferensingQuery", b =>
                {
                    b.HasOne("AutoReferenceSystem.ApplicationServer.Domain.Entities.Model", "Model")
                        .WithMany("ReferensingQueries")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoReferenceSystem.ApplicationServer.Domain.Entities.Session", "Session")
                        .WithMany("ReferensingQueries")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.Session", b =>
                {
                    b.HasOne("AutoReferenceSystem.ApplicationServer.Domain.Entities.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.AttachmentType", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.Characteristic", b =>
                {
                    b.Navigation("ListValuesCharacteristics");

                    b.Navigation("ModelCharacteristics");

                    b.Navigation("ReferencingQueryCharacteristics");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.CharacteristicsType", b =>
                {
                    b.Navigation("Characteristics");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.Measure", b =>
                {
                    b.Navigation("Characteristics");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.Model", b =>
                {
                    b.Navigation("ModelCharacteristics");

                    b.Navigation("ReferensingQueries");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.ReferensingQuery", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("ReferencingQueryCharacteristics");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.Server", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.Session", b =>
                {
                    b.Navigation("ReferensingQueries");
                });

            modelBuilder.Entity("AutoReferenceSystem.ApplicationServer.Domain.Entities.User", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
